// functions
// convert px to em
@function em($px: 0, $font-size: $rem-base) {
  @return $px / $font-size + em;
}

// convert unitless or px to rem
@function rem($val) {
  @if unit($val) == "px" or unitless($val) {
    @return rem-calc($val);
  }
  @else if unit($val) == "rem" {
    @return $val;
  }
  @else {
    @warn "`#{$val}` is not a supported try a px or rem value";

    @return false;
  }
}

// convert rem to px
@function px($val, $base: $rem-base) {
  @if unitless($val) {
    @return $val * 1px;
  }

  @if unit($val) == "px" {
    @return $val;
  }
  @else if unit($val) == "rem" {
    @return $val * $base / 1rem;
  }
  @else {
    @warn "`#{$val}` is not a supported try a px or rem value";

    @return false;
  }
}

// find the nearest ceiling rem value to a baseline unit
@function vr-size($val: 1px, $remove: 0px, $base-unit: rem($base-unit)) {
  @return ceil(rem($val) / $base-unit) * $base-unit - rem($remove);
}

// round to the nearest specified number
@function round-to($val, $unit: $base-unit) {
  @return round($val / $unit) * $unit;
}

// mixins
@mixin vr($fontSize, $from: $fontSize, $baseline: true, $border: 0, $line-height: $line-height) {
  // convert to px as needed
  $from: px($from);
  $fontSize: px($fontSize);

  // get nearest line-height to unit
  $_lineHeight: round-to($fontSize * $line-height, $base-unit);

  // get nearest line-height to unit offset
  $_lineHeightOffset: round-to($from * $line-height, $base-unit) - $_lineHeight;

  @if $fontSize < $from {
    // child baseline or vertical center
    $baseline-ratio: if($baseline, 3, 2);
    $baseline-offset: if($baseline, $_lineHeightOffset * 2, $_lineHeightOffset);

    padding-top: rem(round($baseline-offset / $baseline-ratio) - $border / 2);
    padding-bottom: rem(round($_lineHeightOffset / $baseline-ratio) - $border / 2);
  }
  @else {
    // set line-height including partial pixel
    line-height: $_lineHeight / $fontSize + 0.0005;
  }
}